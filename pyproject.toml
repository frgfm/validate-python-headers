[project]
name = "validate-python-headers"
version = "0.5.0.dev0"
description = "Python header validator"
requires-python = ">=3.11,<4.0"
license = { text = "Apache-2.0" }
authors = [{ name = "François-Guillaume Fernandez", email = "fg-feedback@protonmail.com" }]
maintainers = [{ name = "François-Guillaume Fernandez", email = "fg-feedback@protonmail.com" }]
readme = "README.md"
repository = { url = "https://github.com/frgfm/validate-python-headers" }
keywords = ["github action", "python", "header", "copyright", "license"]
dependencies = [
    "fastapi>=0.109.1,<1.0.0",
    "sqlmodel>=0.0.22,<0.1.0",
    "pydantic>=2.0.0,<3.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",
    "requests>=2.32.0,<3.0.0",
    "uvicorn>=0.23.0,<1.0.0",
    "asyncpg>=0.29.0,<1.0.0",
    # Optional
    "sentry-sdk[fastapi]>=2.14.0,<3.0.0"
]

[tool.uv]
dev-dependencies = [
    "ruff==0.8.2",
    "mypy==1.13.0",
    "pre-commit>=3.8.0,<5.0.0"
]

[tool.ruff]
line-length = 120
target-version = "py311"
preview = true

[tool.ruff.lint]
select = [
    "F",  # pyflakes
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "I",  # isort
    "N",  # pep8-naming
    # "D101", "D103",  # pydocstyle missing docstring in public function/class
    "D201","D202","D207","D208","D214","D215","D300","D301","D417", "D419",  # pydocstyle
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "ASYNC",  # flake8-async
    "S",  # flake8-bandit
    "BLE",  # flake8-blind-except
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "COM",  # flake8-commas
    "CPY",  # flake8-copyright
    "C4",  # flake8-comprehensions
    "T10",  # flake8-debugger
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "LOG",  # flake8-logging
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "PERF",  # perflint
    "NPY",  # numpy
    "FAST",  # fastapi
    "FURB",  # refurb
    "RUF",  # ruff specific
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from
    "C901",  # too complex
    "F403",  # star imports
    "E731",  # lambda assignment
    "C416",  # list comprehension to list()
    "ANN002",  # missing type annotations on *args
    "ANN003",  # missing type annotations on **kwargs
    "COM812",  # trailing comma missing
    "ISC001",  # implicit string concatenation (handled by format)
    "G004",  # logging-fstring-interpolation
]
exclude = [".git"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.isort]
known-first-party = []
known-third-party = []

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["I001", "F401", "CPY001"]
".github/**.py" = ["D", "T201", "ANN"]
"src/**.py" = ["ANN"]
"src/tests/**.py" = ["D103", "CPY001", "S101", "T201", "ANN001", "ANN201", "ARG001"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.11"
files = "src/*.py"
show_error_codes = true
pretty = true
warn_unused_ignores = true
warn_redundant_casts = true
no_implicit_optional = true
check_untyped_defs = true
implicit_reexport = false
explicit_package_bases = true
